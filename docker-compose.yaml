version: '3.8'

services:

  redpanda:
    image: redpandadata/redpanda:latest
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --node-id 0
      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
      - --pandaproxy-addr 0.0.0.0:8082
      - --advertise-pandaproxy-addr localhost:8082
    ports:
      - 8081:8081
      - 8082:8082
      - 9092:9092
      - 29092:29092

  console:
    image: redpandadata/console:latest
    restart: on-failure
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:29092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        connect:
          enabled: true
          clusters:
            - name: datagen
              url: http://connect:8083
    ports:
      - "8080:8080"
    depends_on:
      - redpanda

  redis:
    image: redis:latest
    container_name: redis-server
    ports:
      - "6379:6379"  # Mapeia a porta do Redis para a porta 6379 do host
    volumes:
      - redis_data:/data  # Volume persistente para armazenar dados do Redis
    

  nestjs-backend:
    build: .
    container_name: nestjs-backend
    ports:
      - "3001:3001"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - .:/usr/src/app  # Mapeia a pasta local para dentro do container
      - /usr/src/app/node_modules  # Evita sobrescrever a pasta node_modules    
    depends_on:
      - redis
    

volumes:
  redis_data: {}  # Declaração do volume

# Definindo redes
